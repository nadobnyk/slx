#define SLX2 ON

public module Analyzer {
	 int countPackedEngines = 0;
	 int maxWaitingEngines = 0;
	 int aboluteProcessingTime = 0;
}

module verpackungssystem {

// Zeiteinheit: 1 Sekunde

int anzahlHaken = 40;
int anzahlLbs = 9;

double hfsSchrittDauer = 4;
double verpackZeit = 30;
double entladezeit = 10;

control boolean hfs_moving = TRUE;
control integer haken_position = 0;

passive class Motor(int mtyp) {
	int typ = mtyp;
	double erzeugungsZeitpunkt;

	initial{
		erzeugungsZeitpunkt = time;
	}
}
passive class Haken(int id_) {
	pointer(Motor) motor;
	int id = id_;
}

class HFS(int anzahlHaken_) {
	int anzahlHaken = anzahlHaken_;
	int my_stop_haken_requests;
	set(Haken) haken;
	pointer(Haken) my_last_haken;
	
	initial {
		haken_position = 0;
		my_stop_haken_requests = 0;
		int i;
		for (i=0; i<anzahlHaken; i++) {
			place new Haken(i+1) into haken;
		}
	}

	procedure check_haken() returning boolean{
		if(haken_position%hfsSchrittDauer==0){
			return TRUE;
		}else{
			return FALSE;
		}
	}
	procedure get_haken(int at_position) returning pointer(Haken){
		if(at_position>anzahlHaken){
			print "\nERROR: Position > Anzahl Haken\n\n";
			return NULL;
		}else{
			if(haken_position%hfsSchrittDauer==0){
				return position(at_position) in haken;
			}else{
				return NULL;
				print "\nERROR: Haken not at Position\n\n";
			}
		}
	}

	procedure stop(){
		my_stop_haken_requests++;
		if(my_stop_haken_requests>0){
			hfs_moving=FALSE;
			
			//DEBUG
			print(time) "[_]\thaken stop\n";
		}
	}
	procedure start(){
		my_stop_haken_requests--;
		if(my_stop_haken_requests==0){
			hfs_moving=TRUE;

			//DEBUG
			print(time) "[_]\thaken move\n";
		}
	}
	
	actions {
		forever{
			if(hfs_moving){
					haken_position++;
					if(haken_position%hfsSchrittDauer==0){
						my_last_haken = last Haken in haken;
						remove last Haken from haken;
						place my_last_haken into haken before first Haken in haken;
					}
					advance 1;

			}else{
				wait until(hfs_moving);
			}
		}
	}
}

pointer(HFS) hfs;


// Der Testbereich hängt die Motoren in der
// Reihenfolge ihrer Ankunft auf der HFS auf.
class TestBereich {
	set(Motor) ranked FIFO wartende_motoren;
	pointer(Haken) my_active_haken;
	actions {
		forever{
			if(hfs->check_haken()){
				my_active_haken =hfs->get_haken(1) ; //gibt den haken vor dem testbereich aus
				if (my_active_haken->motor == NULL && wartende_motoren.size>0){
					hfs->stop();

					//DEBUG
					print(time, my_active_haken->id) "[_]\tTestbereich loads haken _\n";

					my_active_haken->motor = first Motor in wartende_motoren;
					remove first Motor from wartende_motoren;

					advance entladezeit;
					hfs->start();
				}
				else{
					advance 1;
				}
			}else{
				advance 1;
			}
		}
	}
}

pointer(TestBereich) testBereich;

class LB {
	int lbPosition; // Position des Laufbands im Raum, LB 1 befindet sich vor Haken-Index 2
	set(Motor) motoren; // Zustand der Palette
	int motorTyp; // aktueller Typ

	
	actions {
		lbPosition= position(ME) in lbs;
		private pointer(Haken) my_active_haken;
		pointer(Haken) hakenAmLb;
		pointer(Motor) lastMotor;
		pointer(LB) my_LB;
		boolean testMotorenTypNeed;
		boolean testMotorenTypAvailablity;
		
		//motoren abnehmen
		fork{
			forever{
				if(hfs->check_haken()){
					my_active_haken = hfs->get_haken(lbPosition+1);
					if(my_active_haken->motor==NULL){
						advance 1;
					}else{
						//teste ob motorentyp benötigt wird
						testMotorenTypNeed=TRUE;
						lastMotor = last Motor in motoren;
						if(lastMotor != NULL && motoren.size%3 != 0){
							if(lastMotor->typ != my_active_haken->motor->typ){
								testMotorenTypNeed=FALSE;
							}
						}
						
						//teste ob motorentyp reserviert ist
						testMotorenTypAvailablity = TRUE;
						my_LB = ME;
						while(successor(my_LB) in lbs !=NULL){
							my_LB=successor(my_LB) in lbs;
							if(my_LB->motorTyp == my_active_haken->motor->typ || my_LB->motoren.size%3 == 0){
								testMotorenTypAvailablity=FALSE;
							}
						}

						//wenn motor benötigt und nicht reserviert, dann nehme den motor
						if(testMotorenTypNeed && testMotorenTypAvailablity){
							hfs->stop();

							//motortyp reservieren, wenn noch zusätzliche motoren benötigt werden
							motorTyp = my_active_haken->motor->typ;

							//DEBUG
							print(time, ME, my_active_haken->id) "[_]\t_ takes haken _\n";	

							place my_active_haken->motor into motoren;
							my_active_haken->motor = NULL;
							advance entladezeit;
							hfs->start();
						}else{
							advance 1;
						}
					}
				}else{
					advance 1;
				}
			}
		}

		//motoren verpacken
		fork{
			forever{
				if(motoren.size>=3){
					//DEBUG
					print(time, ME, (first Motor in motoren)->typ) "[_]\t_ verpackt 3 Motoren Typ_\n";

					int i;
					for (i=0; i<3;i++){
						countPackedEngines++;
						aboluteProcessingTime = aboluteProcessingTime + (time - (first Motor in motoren)->erzeugungsZeitpunkt);
						remove first Motor from motoren;
					}
					advance verpackZeit;
				}else{
					advance 1;
				}
			}
		}
	}
}

set(LB) lbs; // Menge aller Laufbänder

procedure erzeugeLbs(int anzahl) {
	pointer(LB) lb;
	int i;
	for (i=0; i<anzahl; i++) {
		lb = new LB();
		place lb into lbs;
		activate lb;
	}
}

class MotorenAnkunft(int mtyp, double aps) {
	int typ=mtyp;
	double anzahlProStunde=aps;
	pointer(Motor) my_motor;

	actions {
		//erstellt motoren alle 3600/aps sekunden
		forever{
			place new Motor(typ) into testBereich->wartende_motoren;
			if(testBereich->wartende_motoren.size > maxWaitingEngines){
				maxWaitingEngines = testBereich->wartende_motoren.size;
			}
			advance (3600/anzahlProStunde);
		}
	}
}

procedure erzeugeMotorenAnkunftsProzess(int mtyp, double anzahlProStunde) {
	pointer(MotorenAnkunft) ma;
	ma = new MotorenAnkunft(mtyp,anzahlProStunde);
	activate ma;
}

procedure main() {
	hfs = new HFS(anzahlHaken);
	activate hfs;
	
	erzeugeLbs(anzahlLbs);
	
	testBereich = new TestBereich();
	activate testBereich;
	
	erzeugeMotorenAnkunftsProzess( 3, 9);
	erzeugeMotorenAnkunftsProzess( 4, 9);
	erzeugeMotorenAnkunftsProzess( 5, 6);
	erzeugeMotorenAnkunftsProzess( 1, 13);
	erzeugeMotorenAnkunftsProzess( 2, 11);
	erzeugeMotorenAnkunftsProzess( 6, 1.5);
	erzeugeMotorenAnkunftsProzess( 9, 1.5);
	erzeugeMotorenAnkunftsProzess(13, 1);
	erzeugeMotorenAnkunftsProzess(14, 0.5);
	erzeugeMotorenAnkunftsProzess(15, 0.5);
	erzeugeMotorenAnkunftsProzess(10, 1);
	erzeugeMotorenAnkunftsProzess(11, 1);
	erzeugeMotorenAnkunftsProzess(12, 1);
	erzeugeMotorenAnkunftsProzess( 7, 1.5);
	erzeugeMotorenAnkunftsProzess( 8, 1.5);
	erzeugeMotorenAnkunftsProzess(16, 0.5);
	erzeugeMotorenAnkunftsProzess(17, 0.5);
	
	advance 60*60*24;
		
	report(system);

	print "\n\n**********Simulation Analysis**************\n";
	print(countPackedEngines, maxWaitingEngines, (double) aboluteProcessingTime/countPackedEngines/(60)) "Verpackte Motoren:\t\t_\nMaximale Wartseschlange:\t_\nDurchschn. Durchlaufzeit:\t_ min\n\n";

	int i;
	i = 0;
	pointer(LB) xx;
	while(i<anzahlLbs){
		i++;
		xx = position(i) in lbs;
		print(i, xx->motoren.size, xx->motorTyp) "LB_:\t_ Motoren vom Typ _\n";
	}

	i = 0;
	pointer(Haken) yy;
	while(i<anzahlHaken){
		i++;
		yy = position(i) in hfs->haken;
		print(i, yy->motor->typ) "Haken_:\t Motor _\n";
	}

}

}